#!/usr/bin/env python
# Given a directory of files, find all files having the given suffix and
# generate a sample matrix csv file, with the following columns:
# - Sample
# - Label
# - Group
# - Replicate
# - Batch
# - Mark
# - PeakType
# - FileName

# Usage: python generate_sample_matrix.py -d/--dir <directory> 
#                                         -s/--suffix <suffix>
#                                         -o/--output <output_file>

import os
import pandas as pd
import argparse

def generate_sample_matrix(directory, suffix, output_file):
    # Traverse the directory to find files with the specified suffix
    sample_matrix = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith(suffix):
                # Extract sample name
                sample_name = file[:-len(suffix)]
                
                # Append sample data to the sample matrix
                sample_matrix.append({
                    "Sample": sample_name,
                    "Label": sample_name,
                    "Group": "",
                    "Replicate": "",
                    "Batch": "",
                    "Mark": "",
                    "PeakType": "",
                    "FileName": file
                })

    # Convert the sample matrix to a pandas DataFrame
    sample_matrix_df = pd.DataFrame(sample_matrix)
    sample_matrix_df.to_csv(output_file, index=False)

    print("Sample matrix generated successfully!")
    print(f"Sample matrix saved to {output_file}")

def main():
    parser = argparse.ArgumentParser(description="Generate a sample matrix csv file for files in a directory")
    parser.add_argument("-d", "--dir", type=str, required=True, help="Directory containing the files")
    parser.add_argument("-s", "--suffix", type=str, required=True, help="Suffix of the files to include")
    parser.add_argument("-o", "--output", type=str, required=True, help="Output file to save the sample matrix")
    args = parser.parse_args()

    generate_sample_matrix(args.dir, args.suffix, args.output)

if __name__ == "__main__":
    main()

# [END]